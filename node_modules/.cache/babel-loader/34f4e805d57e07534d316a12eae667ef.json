{"ast":null,"code":"var attempts = {};\nvar networkErrorAttempts = 0;\nexport default function rateLimit(instance) {\n  var maxRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  instance.interceptors.response.use(function (response) {\n    // we don't need to do anything here\n    return response;\n  }, function (error) {\n    var response = error.response,\n        config = error.config; // Do not retry if it is disabled or no request config exists (not an axios error)\n\n    if (!config || !instance.defaults.retryOnError) {\n      return Promise.reject(error);\n    }\n\n    var retryErrorType = null;\n    var wait = 0; // Errors without response did not recieve anything from the server\n\n    if (!response) {\n      retryErrorType = 'Connection';\n      networkErrorAttempts++;\n\n      if (networkErrorAttempts > maxRetry) {\n        error.attempts = networkErrorAttempts;\n        return Promise.reject(error);\n      }\n\n      wait = Math.pow(Math.SQRT2, networkErrorAttempts);\n      response = {};\n    } else {\n      networkErrorAttempts = 0;\n    }\n\n    if (response.status >= 500 && response.status < 600) {\n      // 5** errors are server related\n      retryErrorType = 'Server ' + response.status;\n      var headers = response.headers || {};\n      var requestId = headers['x-contentful-request-id'] || null;\n      attempts[requestId] = attempts[requestId] || 0;\n      attempts[requestId]++; // we reject if there are too much errors of with the same request id\n\n      if (attempts[requestId] > maxRetry || !requestId) {\n        error.attempts = attempts[requestId];\n        return Promise.reject(error);\n      }\n\n      wait = Math.pow(Math.SQRT2, attempts[requestId]);\n    } else if (response.status === 429) {\n      // 429 errors are exceeded rate limit exceptions\n      retryErrorType = 'Rate limit'; // all headers are lowercased by axios https://github.com/mzabriskie/axios/issues/413\n\n      if (response.headers && error.response.headers['x-contentful-ratelimit-reset']) {\n        wait = response.headers['x-contentful-ratelimit-reset'];\n      }\n    }\n\n    var delay = function delay(ms) {\n      return new Promise(function (resolve) {\n        setTimeout(resolve, ms);\n      });\n    };\n\n    if (retryErrorType) {\n      // convert to ms and add jitter\n      wait = Math.floor(wait * 1000 + Math.random() * 200 + 500);\n      instance.defaults.logHandler('warning', retryErrorType + ' error occurred. Waiting for ' + wait + ' ms before retrying...');\n      return delay(wait).then(function () {\n        return instance(config);\n      });\n    }\n\n    return Promise.reject(error);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}